// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/model/activity.model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 643494472515906494),
      name: 'Activity',
      lastPropertyId: const IdUid(5, 3438084175449556020),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5295320527638957919),
            name: 'key',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2894117047612951492),
            name: 'activity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1250022524904483695),
            name: 'participant',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3830596806597853795),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3438084175449556020),
            name: 'accessibility',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 643494472515906494),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Activity: EntityDefinition<Activity>(
        model: _entities[0],
        toOneRelations: (Activity object) => [],
        toManyRelations: (Activity object) => {},
        getId: (Activity object) => object.key,
        setId: (Activity object, int id) {
          object.key = id;
        },
        objectToFB: (Activity object, fb.Builder fbb) {
          final activityOffset = object.activity == null
              ? null
              : fbb.writeString(object.activity!);
          fbb.startTable(6);
          fbb.addInt64(0, object.key ?? 0);
          fbb.addOffset(1, activityOffset);
          fbb.addInt64(2, object.participant);
          fbb.addInt64(3, object.price);
          fbb.addFloat64(4, object.accessibility);
          fbb.finish(fbb.endTable());
          return object.key ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final activityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final participantParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final priceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final accessibilityParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = Activity(
              key: keyParam,
              activity: activityParam,
              participant: participantParam,
              price: priceParam,
              accessibility: accessibilityParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

// ignore: avoid_classes_with_only_static_members
/// [Activity] entity fields to define ObjectBox queries.
class Activity_ {
  /// see [Activity.key]
  static final key = QueryIntegerProperty<Activity>(_entities[0].properties[0]);

  /// see [Activity.activity]
  static final activity =
      QueryStringProperty<Activity>(_entities[0].properties[1]);

  /// see [Activity.participant]
  static final participant =
      QueryIntegerProperty<Activity>(_entities[0].properties[2]);

  /// see [Activity.price]
  static final price =
      QueryIntegerProperty<Activity>(_entities[0].properties[3]);

  /// see [Activity.accessibility]
  static final accessibility =
      QueryDoubleProperty<Activity>(_entities[0].properties[4]);
}
